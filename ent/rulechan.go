// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/dipper-iot/dipper-engine-server/ent/rulechan"
)

// RuleChan is the model entity for the RuleChan schema.
type RuleChan struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// RootNode holds the value of the "root_node" field.
	RootNode string `json:"root_node,omitempty"`
	// Status holds the value of the "status" field.
	Status rulechan.Status `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RuleChanQuery when eager-loading is set.
	Edges RuleChanEdges `json:"edges"`
}

// RuleChanEdges holds the relations/edges for other nodes in the graph.
type RuleChanEdges struct {
	// Rules holds the value of the rules edge.
	Rules []*RuleNode `json:"rules,omitempty"`
	// Sessions holds the value of the sessions edge.
	Sessions []*Session `json:"sessions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RulesOrErr returns the Rules value or an error if the edge
// was not loaded in eager-loading.
func (e RuleChanEdges) RulesOrErr() ([]*RuleNode, error) {
	if e.loadedTypes[0] {
		return e.Rules, nil
	}
	return nil, &NotLoadedError{edge: "rules"}
}

// SessionsOrErr returns the Sessions value or an error if the edge
// was not loaded in eager-loading.
func (e RuleChanEdges) SessionsOrErr() ([]*Session, error) {
	if e.loadedTypes[1] {
		return e.Sessions, nil
	}
	return nil, &NotLoadedError{edge: "sessions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RuleChan) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rulechan.FieldID:
			values[i] = new(sql.NullInt64)
		case rulechan.FieldName, rulechan.FieldDescription, rulechan.FieldRootNode, rulechan.FieldStatus:
			values[i] = new(sql.NullString)
		case rulechan.FieldCreatedAt, rulechan.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type RuleChan", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RuleChan fields.
func (rc *RuleChan) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rulechan.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rc.ID = uint64(value.Int64)
		case rulechan.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rc.Name = value.String
			}
		case rulechan.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				rc.Description = new(string)
				*rc.Description = value.String
			}
		case rulechan.FieldRootNode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field root_node", values[i])
			} else if value.Valid {
				rc.RootNode = value.String
			}
		case rulechan.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				rc.Status = rulechan.Status(value.String)
			}
		case rulechan.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rc.CreatedAt = value.Time
			}
		case rulechan.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rc.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryRules queries the "rules" edge of the RuleChan entity.
func (rc *RuleChan) QueryRules() *RuleNodeQuery {
	return (&RuleChanClient{config: rc.config}).QueryRules(rc)
}

// QuerySessions queries the "sessions" edge of the RuleChan entity.
func (rc *RuleChan) QuerySessions() *SessionQuery {
	return (&RuleChanClient{config: rc.config}).QuerySessions(rc)
}

// Update returns a builder for updating this RuleChan.
// Note that you need to call RuleChan.Unwrap() before calling this method if this RuleChan
// was returned from a transaction, and the transaction was committed or rolled back.
func (rc *RuleChan) Update() *RuleChanUpdateOne {
	return (&RuleChanClient{config: rc.config}).UpdateOne(rc)
}

// Unwrap unwraps the RuleChan entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rc *RuleChan) Unwrap() *RuleChan {
	_tx, ok := rc.config.driver.(*txDriver)
	if !ok {
		panic("ent: RuleChan is not a transactional entity")
	}
	rc.config.driver = _tx.drv
	return rc
}

// String implements the fmt.Stringer.
func (rc *RuleChan) String() string {
	var builder strings.Builder
	builder.WriteString("RuleChan(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rc.ID))
	builder.WriteString("name=")
	builder.WriteString(rc.Name)
	builder.WriteString(", ")
	if v := rc.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("root_node=")
	builder.WriteString(rc.RootNode)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", rc.Status))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rc.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// RuleChans is a parsable slice of RuleChan.
type RuleChans []*RuleChan

func (rc RuleChans) config(cfg config) {
	for _i := range rc {
		rc[_i].config = cfg
	}
}
