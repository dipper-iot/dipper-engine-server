// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/dipper-iot/dipper-engine-server/ent/predicate"
	"github.com/dipper-iot/dipper-engine-server/ent/rulechan"
	"github.com/dipper-iot/dipper-engine-server/ent/rulenode"
	"github.com/dipper-iot/dipper-engine-server/ent/session"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeRuleChan = "RuleChan"
	TypeRuleNode = "RuleNode"
	TypeSession  = "Session"
)

// RuleChanMutation represents an operation that mutates the RuleChan nodes in the graph.
type RuleChanMutation struct {
	config
	op              Op
	typ             string
	id              *uint64
	name            *string
	description     *string
	root_node       *string
	status          *rulechan.Status
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	rules           map[uint64]struct{}
	removedrules    map[uint64]struct{}
	clearedrules    bool
	sessions        map[uint64]struct{}
	removedsessions map[uint64]struct{}
	clearedsessions bool
	done            bool
	oldValue        func(context.Context) (*RuleChan, error)
	predicates      []predicate.RuleChan
}

var _ ent.Mutation = (*RuleChanMutation)(nil)

// rulechanOption allows management of the mutation configuration using functional options.
type rulechanOption func(*RuleChanMutation)

// newRuleChanMutation creates new mutation for the RuleChan entity.
func newRuleChanMutation(c config, op Op, opts ...rulechanOption) *RuleChanMutation {
	m := &RuleChanMutation{
		config:        c,
		op:            op,
		typ:           TypeRuleChan,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRuleChanID sets the ID field of the mutation.
func withRuleChanID(id uint64) rulechanOption {
	return func(m *RuleChanMutation) {
		var (
			err   error
			once  sync.Once
			value *RuleChan
		)
		m.oldValue = func(ctx context.Context) (*RuleChan, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RuleChan.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRuleChan sets the old RuleChan of the mutation.
func withRuleChan(node *RuleChan) rulechanOption {
	return func(m *RuleChanMutation) {
		m.oldValue = func(context.Context) (*RuleChan, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RuleChanMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RuleChanMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RuleChan entities.
func (m *RuleChanMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RuleChanMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RuleChanMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RuleChan.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *RuleChanMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RuleChanMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the RuleChan entity.
// If the RuleChan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleChanMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RuleChanMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *RuleChanMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *RuleChanMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the RuleChan entity.
// If the RuleChan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleChanMutation) OldDescription(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *RuleChanMutation) ResetDescription() {
	m.description = nil
}

// SetRootNode sets the "root_node" field.
func (m *RuleChanMutation) SetRootNode(s string) {
	m.root_node = &s
}

// RootNode returns the value of the "root_node" field in the mutation.
func (m *RuleChanMutation) RootNode() (r string, exists bool) {
	v := m.root_node
	if v == nil {
		return
	}
	return *v, true
}

// OldRootNode returns the old "root_node" field's value of the RuleChan entity.
// If the RuleChan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleChanMutation) OldRootNode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRootNode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRootNode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRootNode: %w", err)
	}
	return oldValue.RootNode, nil
}

// ResetRootNode resets all changes to the "root_node" field.
func (m *RuleChanMutation) ResetRootNode() {
	m.root_node = nil
}

// SetStatus sets the "status" field.
func (m *RuleChanMutation) SetStatus(r rulechan.Status) {
	m.status = &r
}

// Status returns the value of the "status" field in the mutation.
func (m *RuleChanMutation) Status() (r rulechan.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the RuleChan entity.
// If the RuleChan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleChanMutation) OldStatus(ctx context.Context) (v rulechan.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *RuleChanMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *RuleChanMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RuleChanMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the RuleChan entity.
// If the RuleChan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleChanMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RuleChanMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RuleChanMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RuleChanMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the RuleChan entity.
// If the RuleChan object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleChanMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RuleChanMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddRuleIDs adds the "rules" edge to the RuleNode entity by ids.
func (m *RuleChanMutation) AddRuleIDs(ids ...uint64) {
	if m.rules == nil {
		m.rules = make(map[uint64]struct{})
	}
	for i := range ids {
		m.rules[ids[i]] = struct{}{}
	}
}

// ClearRules clears the "rules" edge to the RuleNode entity.
func (m *RuleChanMutation) ClearRules() {
	m.clearedrules = true
}

// RulesCleared reports if the "rules" edge to the RuleNode entity was cleared.
func (m *RuleChanMutation) RulesCleared() bool {
	return m.clearedrules
}

// RemoveRuleIDs removes the "rules" edge to the RuleNode entity by IDs.
func (m *RuleChanMutation) RemoveRuleIDs(ids ...uint64) {
	if m.removedrules == nil {
		m.removedrules = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.rules, ids[i])
		m.removedrules[ids[i]] = struct{}{}
	}
}

// RemovedRules returns the removed IDs of the "rules" edge to the RuleNode entity.
func (m *RuleChanMutation) RemovedRulesIDs() (ids []uint64) {
	for id := range m.removedrules {
		ids = append(ids, id)
	}
	return
}

// RulesIDs returns the "rules" edge IDs in the mutation.
func (m *RuleChanMutation) RulesIDs() (ids []uint64) {
	for id := range m.rules {
		ids = append(ids, id)
	}
	return
}

// ResetRules resets all changes to the "rules" edge.
func (m *RuleChanMutation) ResetRules() {
	m.rules = nil
	m.clearedrules = false
	m.removedrules = nil
}

// AddSessionIDs adds the "sessions" edge to the Session entity by ids.
func (m *RuleChanMutation) AddSessionIDs(ids ...uint64) {
	if m.sessions == nil {
		m.sessions = make(map[uint64]struct{})
	}
	for i := range ids {
		m.sessions[ids[i]] = struct{}{}
	}
}

// ClearSessions clears the "sessions" edge to the Session entity.
func (m *RuleChanMutation) ClearSessions() {
	m.clearedsessions = true
}

// SessionsCleared reports if the "sessions" edge to the Session entity was cleared.
func (m *RuleChanMutation) SessionsCleared() bool {
	return m.clearedsessions
}

// RemoveSessionIDs removes the "sessions" edge to the Session entity by IDs.
func (m *RuleChanMutation) RemoveSessionIDs(ids ...uint64) {
	if m.removedsessions == nil {
		m.removedsessions = make(map[uint64]struct{})
	}
	for i := range ids {
		delete(m.sessions, ids[i])
		m.removedsessions[ids[i]] = struct{}{}
	}
}

// RemovedSessions returns the removed IDs of the "sessions" edge to the Session entity.
func (m *RuleChanMutation) RemovedSessionsIDs() (ids []uint64) {
	for id := range m.removedsessions {
		ids = append(ids, id)
	}
	return
}

// SessionsIDs returns the "sessions" edge IDs in the mutation.
func (m *RuleChanMutation) SessionsIDs() (ids []uint64) {
	for id := range m.sessions {
		ids = append(ids, id)
	}
	return
}

// ResetSessions resets all changes to the "sessions" edge.
func (m *RuleChanMutation) ResetSessions() {
	m.sessions = nil
	m.clearedsessions = false
	m.removedsessions = nil
}

// Where appends a list predicates to the RuleChanMutation builder.
func (m *RuleChanMutation) Where(ps ...predicate.RuleChan) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *RuleChanMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (RuleChan).
func (m *RuleChanMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RuleChanMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, rulechan.FieldName)
	}
	if m.description != nil {
		fields = append(fields, rulechan.FieldDescription)
	}
	if m.root_node != nil {
		fields = append(fields, rulechan.FieldRootNode)
	}
	if m.status != nil {
		fields = append(fields, rulechan.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, rulechan.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, rulechan.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RuleChanMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rulechan.FieldName:
		return m.Name()
	case rulechan.FieldDescription:
		return m.Description()
	case rulechan.FieldRootNode:
		return m.RootNode()
	case rulechan.FieldStatus:
		return m.Status()
	case rulechan.FieldCreatedAt:
		return m.CreatedAt()
	case rulechan.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RuleChanMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rulechan.FieldName:
		return m.OldName(ctx)
	case rulechan.FieldDescription:
		return m.OldDescription(ctx)
	case rulechan.FieldRootNode:
		return m.OldRootNode(ctx)
	case rulechan.FieldStatus:
		return m.OldStatus(ctx)
	case rulechan.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case rulechan.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown RuleChan field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RuleChanMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rulechan.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case rulechan.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case rulechan.FieldRootNode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRootNode(v)
		return nil
	case rulechan.FieldStatus:
		v, ok := value.(rulechan.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case rulechan.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case rulechan.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown RuleChan field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RuleChanMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RuleChanMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RuleChanMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown RuleChan numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RuleChanMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RuleChanMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RuleChanMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RuleChan nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RuleChanMutation) ResetField(name string) error {
	switch name {
	case rulechan.FieldName:
		m.ResetName()
		return nil
	case rulechan.FieldDescription:
		m.ResetDescription()
		return nil
	case rulechan.FieldRootNode:
		m.ResetRootNode()
		return nil
	case rulechan.FieldStatus:
		m.ResetStatus()
		return nil
	case rulechan.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case rulechan.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown RuleChan field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RuleChanMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.rules != nil {
		edges = append(edges, rulechan.EdgeRules)
	}
	if m.sessions != nil {
		edges = append(edges, rulechan.EdgeSessions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RuleChanMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rulechan.EdgeRules:
		ids := make([]ent.Value, 0, len(m.rules))
		for id := range m.rules {
			ids = append(ids, id)
		}
		return ids
	case rulechan.EdgeSessions:
		ids := make([]ent.Value, 0, len(m.sessions))
		for id := range m.sessions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RuleChanMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedrules != nil {
		edges = append(edges, rulechan.EdgeRules)
	}
	if m.removedsessions != nil {
		edges = append(edges, rulechan.EdgeSessions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RuleChanMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case rulechan.EdgeRules:
		ids := make([]ent.Value, 0, len(m.removedrules))
		for id := range m.removedrules {
			ids = append(ids, id)
		}
		return ids
	case rulechan.EdgeSessions:
		ids := make([]ent.Value, 0, len(m.removedsessions))
		for id := range m.removedsessions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RuleChanMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedrules {
		edges = append(edges, rulechan.EdgeRules)
	}
	if m.clearedsessions {
		edges = append(edges, rulechan.EdgeSessions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RuleChanMutation) EdgeCleared(name string) bool {
	switch name {
	case rulechan.EdgeRules:
		return m.clearedrules
	case rulechan.EdgeSessions:
		return m.clearedsessions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RuleChanMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown RuleChan unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RuleChanMutation) ResetEdge(name string) error {
	switch name {
	case rulechan.EdgeRules:
		m.ResetRules()
		return nil
	case rulechan.EdgeSessions:
		m.ResetSessions()
		return nil
	}
	return fmt.Errorf("unknown RuleChan edge %s", name)
}

// RuleNodeMutation represents an operation that mutates the RuleNode nodes in the graph.
type RuleNodeMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	node_id       *string
	rule_id       *string
	option        *map[string]interface{}
	debug         *bool
	end           *bool
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	chain         *uint64
	clearedchain  bool
	done          bool
	oldValue      func(context.Context) (*RuleNode, error)
	predicates    []predicate.RuleNode
}

var _ ent.Mutation = (*RuleNodeMutation)(nil)

// rulenodeOption allows management of the mutation configuration using functional options.
type rulenodeOption func(*RuleNodeMutation)

// newRuleNodeMutation creates new mutation for the RuleNode entity.
func newRuleNodeMutation(c config, op Op, opts ...rulenodeOption) *RuleNodeMutation {
	m := &RuleNodeMutation{
		config:        c,
		op:            op,
		typ:           TypeRuleNode,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRuleNodeID sets the ID field of the mutation.
func withRuleNodeID(id uint64) rulenodeOption {
	return func(m *RuleNodeMutation) {
		var (
			err   error
			once  sync.Once
			value *RuleNode
		)
		m.oldValue = func(ctx context.Context) (*RuleNode, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RuleNode.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRuleNode sets the old RuleNode of the mutation.
func withRuleNode(node *RuleNode) rulenodeOption {
	return func(m *RuleNodeMutation) {
		m.oldValue = func(context.Context) (*RuleNode, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RuleNodeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RuleNodeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RuleNode entities.
func (m *RuleNodeMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RuleNodeMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RuleNodeMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RuleNode.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetChainID sets the "chain_id" field.
func (m *RuleNodeMutation) SetChainID(u uint64) {
	m.chain = &u
}

// ChainID returns the value of the "chain_id" field in the mutation.
func (m *RuleNodeMutation) ChainID() (r uint64, exists bool) {
	v := m.chain
	if v == nil {
		return
	}
	return *v, true
}

// OldChainID returns the old "chain_id" field's value of the RuleNode entity.
// If the RuleNode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleNodeMutation) OldChainID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChainID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChainID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChainID: %w", err)
	}
	return oldValue.ChainID, nil
}

// ClearChainID clears the value of the "chain_id" field.
func (m *RuleNodeMutation) ClearChainID() {
	m.chain = nil
	m.clearedFields[rulenode.FieldChainID] = struct{}{}
}

// ChainIDCleared returns if the "chain_id" field was cleared in this mutation.
func (m *RuleNodeMutation) ChainIDCleared() bool {
	_, ok := m.clearedFields[rulenode.FieldChainID]
	return ok
}

// ResetChainID resets all changes to the "chain_id" field.
func (m *RuleNodeMutation) ResetChainID() {
	m.chain = nil
	delete(m.clearedFields, rulenode.FieldChainID)
}

// SetNodeID sets the "node_id" field.
func (m *RuleNodeMutation) SetNodeID(s string) {
	m.node_id = &s
}

// NodeID returns the value of the "node_id" field in the mutation.
func (m *RuleNodeMutation) NodeID() (r string, exists bool) {
	v := m.node_id
	if v == nil {
		return
	}
	return *v, true
}

// OldNodeID returns the old "node_id" field's value of the RuleNode entity.
// If the RuleNode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleNodeMutation) OldNodeID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNodeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNodeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNodeID: %w", err)
	}
	return oldValue.NodeID, nil
}

// ResetNodeID resets all changes to the "node_id" field.
func (m *RuleNodeMutation) ResetNodeID() {
	m.node_id = nil
}

// SetRuleID sets the "rule_id" field.
func (m *RuleNodeMutation) SetRuleID(s string) {
	m.rule_id = &s
}

// RuleID returns the value of the "rule_id" field in the mutation.
func (m *RuleNodeMutation) RuleID() (r string, exists bool) {
	v := m.rule_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRuleID returns the old "rule_id" field's value of the RuleNode entity.
// If the RuleNode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleNodeMutation) OldRuleID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRuleID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRuleID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRuleID: %w", err)
	}
	return oldValue.RuleID, nil
}

// ResetRuleID resets all changes to the "rule_id" field.
func (m *RuleNodeMutation) ResetRuleID() {
	m.rule_id = nil
}

// SetOption sets the "option" field.
func (m *RuleNodeMutation) SetOption(value map[string]interface{}) {
	m.option = &value
}

// Option returns the value of the "option" field in the mutation.
func (m *RuleNodeMutation) Option() (r map[string]interface{}, exists bool) {
	v := m.option
	if v == nil {
		return
	}
	return *v, true
}

// OldOption returns the old "option" field's value of the RuleNode entity.
// If the RuleNode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleNodeMutation) OldOption(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOption is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOption requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOption: %w", err)
	}
	return oldValue.Option, nil
}

// ResetOption resets all changes to the "option" field.
func (m *RuleNodeMutation) ResetOption() {
	m.option = nil
}

// SetDebug sets the "debug" field.
func (m *RuleNodeMutation) SetDebug(b bool) {
	m.debug = &b
}

// Debug returns the value of the "debug" field in the mutation.
func (m *RuleNodeMutation) Debug() (r bool, exists bool) {
	v := m.debug
	if v == nil {
		return
	}
	return *v, true
}

// OldDebug returns the old "debug" field's value of the RuleNode entity.
// If the RuleNode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleNodeMutation) OldDebug(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDebug is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDebug requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDebug: %w", err)
	}
	return oldValue.Debug, nil
}

// ResetDebug resets all changes to the "debug" field.
func (m *RuleNodeMutation) ResetDebug() {
	m.debug = nil
}

// SetEnd sets the "end" field.
func (m *RuleNodeMutation) SetEnd(b bool) {
	m.end = &b
}

// End returns the value of the "end" field in the mutation.
func (m *RuleNodeMutation) End() (r bool, exists bool) {
	v := m.end
	if v == nil {
		return
	}
	return *v, true
}

// OldEnd returns the old "end" field's value of the RuleNode entity.
// If the RuleNode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleNodeMutation) OldEnd(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnd: %w", err)
	}
	return oldValue.End, nil
}

// ResetEnd resets all changes to the "end" field.
func (m *RuleNodeMutation) ResetEnd() {
	m.end = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *RuleNodeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RuleNodeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the RuleNode entity.
// If the RuleNode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleNodeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RuleNodeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RuleNodeMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RuleNodeMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the RuleNode entity.
// If the RuleNode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleNodeMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RuleNodeMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearChain clears the "chain" edge to the RuleChan entity.
func (m *RuleNodeMutation) ClearChain() {
	m.clearedchain = true
}

// ChainCleared reports if the "chain" edge to the RuleChan entity was cleared.
func (m *RuleNodeMutation) ChainCleared() bool {
	return m.ChainIDCleared() || m.clearedchain
}

// ChainIDs returns the "chain" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ChainID instead. It exists only for internal usage by the builders.
func (m *RuleNodeMutation) ChainIDs() (ids []uint64) {
	if id := m.chain; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetChain resets all changes to the "chain" edge.
func (m *RuleNodeMutation) ResetChain() {
	m.chain = nil
	m.clearedchain = false
}

// Where appends a list predicates to the RuleNodeMutation builder.
func (m *RuleNodeMutation) Where(ps ...predicate.RuleNode) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *RuleNodeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (RuleNode).
func (m *RuleNodeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RuleNodeMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.chain != nil {
		fields = append(fields, rulenode.FieldChainID)
	}
	if m.node_id != nil {
		fields = append(fields, rulenode.FieldNodeID)
	}
	if m.rule_id != nil {
		fields = append(fields, rulenode.FieldRuleID)
	}
	if m.option != nil {
		fields = append(fields, rulenode.FieldOption)
	}
	if m.debug != nil {
		fields = append(fields, rulenode.FieldDebug)
	}
	if m.end != nil {
		fields = append(fields, rulenode.FieldEnd)
	}
	if m.created_at != nil {
		fields = append(fields, rulenode.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, rulenode.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RuleNodeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rulenode.FieldChainID:
		return m.ChainID()
	case rulenode.FieldNodeID:
		return m.NodeID()
	case rulenode.FieldRuleID:
		return m.RuleID()
	case rulenode.FieldOption:
		return m.Option()
	case rulenode.FieldDebug:
		return m.Debug()
	case rulenode.FieldEnd:
		return m.End()
	case rulenode.FieldCreatedAt:
		return m.CreatedAt()
	case rulenode.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RuleNodeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rulenode.FieldChainID:
		return m.OldChainID(ctx)
	case rulenode.FieldNodeID:
		return m.OldNodeID(ctx)
	case rulenode.FieldRuleID:
		return m.OldRuleID(ctx)
	case rulenode.FieldOption:
		return m.OldOption(ctx)
	case rulenode.FieldDebug:
		return m.OldDebug(ctx)
	case rulenode.FieldEnd:
		return m.OldEnd(ctx)
	case rulenode.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case rulenode.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown RuleNode field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RuleNodeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rulenode.FieldChainID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChainID(v)
		return nil
	case rulenode.FieldNodeID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNodeID(v)
		return nil
	case rulenode.FieldRuleID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRuleID(v)
		return nil
	case rulenode.FieldOption:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOption(v)
		return nil
	case rulenode.FieldDebug:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDebug(v)
		return nil
	case rulenode.FieldEnd:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnd(v)
		return nil
	case rulenode.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case rulenode.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown RuleNode field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RuleNodeMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RuleNodeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RuleNodeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown RuleNode numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RuleNodeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(rulenode.FieldChainID) {
		fields = append(fields, rulenode.FieldChainID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RuleNodeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RuleNodeMutation) ClearField(name string) error {
	switch name {
	case rulenode.FieldChainID:
		m.ClearChainID()
		return nil
	}
	return fmt.Errorf("unknown RuleNode nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RuleNodeMutation) ResetField(name string) error {
	switch name {
	case rulenode.FieldChainID:
		m.ResetChainID()
		return nil
	case rulenode.FieldNodeID:
		m.ResetNodeID()
		return nil
	case rulenode.FieldRuleID:
		m.ResetRuleID()
		return nil
	case rulenode.FieldOption:
		m.ResetOption()
		return nil
	case rulenode.FieldDebug:
		m.ResetDebug()
		return nil
	case rulenode.FieldEnd:
		m.ResetEnd()
		return nil
	case rulenode.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case rulenode.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown RuleNode field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RuleNodeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.chain != nil {
		edges = append(edges, rulenode.EdgeChain)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RuleNodeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rulenode.EdgeChain:
		if id := m.chain; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RuleNodeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RuleNodeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RuleNodeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedchain {
		edges = append(edges, rulenode.EdgeChain)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RuleNodeMutation) EdgeCleared(name string) bool {
	switch name {
	case rulenode.EdgeChain:
		return m.clearedchain
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RuleNodeMutation) ClearEdge(name string) error {
	switch name {
	case rulenode.EdgeChain:
		m.ClearChain()
		return nil
	}
	return fmt.Errorf("unknown RuleNode unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RuleNodeMutation) ResetEdge(name string) error {
	switch name {
	case rulenode.EdgeChain:
		m.ResetChain()
		return nil
	}
	return fmt.Errorf("unknown RuleNode edge %s", name)
}

// SessionMutation represents an operation that mutates the Session nodes in the graph.
type SessionMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	is_test       *bool
	infinite      *bool
	data          *map[string]interface{}
	result        *map[string]interface{}
	end_count     *int
	addend_count  *int
	timeout       *int
	addtimeout    *int
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	chain         *uint64
	clearedchain  bool
	done          bool
	oldValue      func(context.Context) (*Session, error)
	predicates    []predicate.Session
}

var _ ent.Mutation = (*SessionMutation)(nil)

// sessionOption allows management of the mutation configuration using functional options.
type sessionOption func(*SessionMutation)

// newSessionMutation creates new mutation for the Session entity.
func newSessionMutation(c config, op Op, opts ...sessionOption) *SessionMutation {
	m := &SessionMutation{
		config:        c,
		op:            op,
		typ:           TypeSession,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSessionID sets the ID field of the mutation.
func withSessionID(id uint64) sessionOption {
	return func(m *SessionMutation) {
		var (
			err   error
			once  sync.Once
			value *Session
		)
		m.oldValue = func(ctx context.Context) (*Session, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Session.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSession sets the old Session of the mutation.
func withSession(node *Session) sessionOption {
	return func(m *SessionMutation) {
		m.oldValue = func(context.Context) (*Session, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SessionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SessionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Session entities.
func (m *SessionMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SessionMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SessionMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Session.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetChainID sets the "chain_id" field.
func (m *SessionMutation) SetChainID(u uint64) {
	m.chain = &u
}

// ChainID returns the value of the "chain_id" field in the mutation.
func (m *SessionMutation) ChainID() (r uint64, exists bool) {
	v := m.chain
	if v == nil {
		return
	}
	return *v, true
}

// OldChainID returns the old "chain_id" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldChainID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChainID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChainID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChainID: %w", err)
	}
	return oldValue.ChainID, nil
}

// ClearChainID clears the value of the "chain_id" field.
func (m *SessionMutation) ClearChainID() {
	m.chain = nil
	m.clearedFields[session.FieldChainID] = struct{}{}
}

// ChainIDCleared returns if the "chain_id" field was cleared in this mutation.
func (m *SessionMutation) ChainIDCleared() bool {
	_, ok := m.clearedFields[session.FieldChainID]
	return ok
}

// ResetChainID resets all changes to the "chain_id" field.
func (m *SessionMutation) ResetChainID() {
	m.chain = nil
	delete(m.clearedFields, session.FieldChainID)
}

// SetIsTest sets the "is_test" field.
func (m *SessionMutation) SetIsTest(b bool) {
	m.is_test = &b
}

// IsTest returns the value of the "is_test" field in the mutation.
func (m *SessionMutation) IsTest() (r bool, exists bool) {
	v := m.is_test
	if v == nil {
		return
	}
	return *v, true
}

// OldIsTest returns the old "is_test" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldIsTest(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsTest is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsTest requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsTest: %w", err)
	}
	return oldValue.IsTest, nil
}

// ResetIsTest resets all changes to the "is_test" field.
func (m *SessionMutation) ResetIsTest() {
	m.is_test = nil
}

// SetInfinite sets the "infinite" field.
func (m *SessionMutation) SetInfinite(b bool) {
	m.infinite = &b
}

// Infinite returns the value of the "infinite" field in the mutation.
func (m *SessionMutation) Infinite() (r bool, exists bool) {
	v := m.infinite
	if v == nil {
		return
	}
	return *v, true
}

// OldInfinite returns the old "infinite" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldInfinite(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInfinite is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInfinite requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInfinite: %w", err)
	}
	return oldValue.Infinite, nil
}

// ResetInfinite resets all changes to the "infinite" field.
func (m *SessionMutation) ResetInfinite() {
	m.infinite = nil
}

// SetData sets the "data" field.
func (m *SessionMutation) SetData(value map[string]interface{}) {
	m.data = &value
}

// Data returns the value of the "data" field in the mutation.
func (m *SessionMutation) Data() (r map[string]interface{}, exists bool) {
	v := m.data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "data" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldData(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// ResetData resets all changes to the "data" field.
func (m *SessionMutation) ResetData() {
	m.data = nil
}

// SetResult sets the "result" field.
func (m *SessionMutation) SetResult(value map[string]interface{}) {
	m.result = &value
}

// Result returns the value of the "result" field in the mutation.
func (m *SessionMutation) Result() (r map[string]interface{}, exists bool) {
	v := m.result
	if v == nil {
		return
	}
	return *v, true
}

// OldResult returns the old "result" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldResult(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResult is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResult requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResult: %w", err)
	}
	return oldValue.Result, nil
}

// ResetResult resets all changes to the "result" field.
func (m *SessionMutation) ResetResult() {
	m.result = nil
}

// SetEndCount sets the "end_count" field.
func (m *SessionMutation) SetEndCount(i int) {
	m.end_count = &i
	m.addend_count = nil
}

// EndCount returns the value of the "end_count" field in the mutation.
func (m *SessionMutation) EndCount() (r int, exists bool) {
	v := m.end_count
	if v == nil {
		return
	}
	return *v, true
}

// OldEndCount returns the old "end_count" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldEndCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndCount: %w", err)
	}
	return oldValue.EndCount, nil
}

// AddEndCount adds i to the "end_count" field.
func (m *SessionMutation) AddEndCount(i int) {
	if m.addend_count != nil {
		*m.addend_count += i
	} else {
		m.addend_count = &i
	}
}

// AddedEndCount returns the value that was added to the "end_count" field in this mutation.
func (m *SessionMutation) AddedEndCount() (r int, exists bool) {
	v := m.addend_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetEndCount resets all changes to the "end_count" field.
func (m *SessionMutation) ResetEndCount() {
	m.end_count = nil
	m.addend_count = nil
}

// SetTimeout sets the "timeout" field.
func (m *SessionMutation) SetTimeout(i int) {
	m.timeout = &i
	m.addtimeout = nil
}

// Timeout returns the value of the "timeout" field in the mutation.
func (m *SessionMutation) Timeout() (r int, exists bool) {
	v := m.timeout
	if v == nil {
		return
	}
	return *v, true
}

// OldTimeout returns the old "timeout" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldTimeout(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimeout is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimeout requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimeout: %w", err)
	}
	return oldValue.Timeout, nil
}

// AddTimeout adds i to the "timeout" field.
func (m *SessionMutation) AddTimeout(i int) {
	if m.addtimeout != nil {
		*m.addtimeout += i
	} else {
		m.addtimeout = &i
	}
}

// AddedTimeout returns the value that was added to the "timeout" field in this mutation.
func (m *SessionMutation) AddedTimeout() (r int, exists bool) {
	v := m.addtimeout
	if v == nil {
		return
	}
	return *v, true
}

// ResetTimeout resets all changes to the "timeout" field.
func (m *SessionMutation) ResetTimeout() {
	m.timeout = nil
	m.addtimeout = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SessionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SessionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SessionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SessionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SessionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SessionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearChain clears the "chain" edge to the RuleChan entity.
func (m *SessionMutation) ClearChain() {
	m.clearedchain = true
}

// ChainCleared reports if the "chain" edge to the RuleChan entity was cleared.
func (m *SessionMutation) ChainCleared() bool {
	return m.ChainIDCleared() || m.clearedchain
}

// ChainIDs returns the "chain" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ChainID instead. It exists only for internal usage by the builders.
func (m *SessionMutation) ChainIDs() (ids []uint64) {
	if id := m.chain; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetChain resets all changes to the "chain" edge.
func (m *SessionMutation) ResetChain() {
	m.chain = nil
	m.clearedchain = false
}

// Where appends a list predicates to the SessionMutation builder.
func (m *SessionMutation) Where(ps ...predicate.Session) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SessionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Session).
func (m *SessionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SessionMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.chain != nil {
		fields = append(fields, session.FieldChainID)
	}
	if m.is_test != nil {
		fields = append(fields, session.FieldIsTest)
	}
	if m.infinite != nil {
		fields = append(fields, session.FieldInfinite)
	}
	if m.data != nil {
		fields = append(fields, session.FieldData)
	}
	if m.result != nil {
		fields = append(fields, session.FieldResult)
	}
	if m.end_count != nil {
		fields = append(fields, session.FieldEndCount)
	}
	if m.timeout != nil {
		fields = append(fields, session.FieldTimeout)
	}
	if m.created_at != nil {
		fields = append(fields, session.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, session.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SessionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case session.FieldChainID:
		return m.ChainID()
	case session.FieldIsTest:
		return m.IsTest()
	case session.FieldInfinite:
		return m.Infinite()
	case session.FieldData:
		return m.Data()
	case session.FieldResult:
		return m.Result()
	case session.FieldEndCount:
		return m.EndCount()
	case session.FieldTimeout:
		return m.Timeout()
	case session.FieldCreatedAt:
		return m.CreatedAt()
	case session.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SessionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case session.FieldChainID:
		return m.OldChainID(ctx)
	case session.FieldIsTest:
		return m.OldIsTest(ctx)
	case session.FieldInfinite:
		return m.OldInfinite(ctx)
	case session.FieldData:
		return m.OldData(ctx)
	case session.FieldResult:
		return m.OldResult(ctx)
	case session.FieldEndCount:
		return m.OldEndCount(ctx)
	case session.FieldTimeout:
		return m.OldTimeout(ctx)
	case session.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case session.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Session field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case session.FieldChainID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChainID(v)
		return nil
	case session.FieldIsTest:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsTest(v)
		return nil
	case session.FieldInfinite:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInfinite(v)
		return nil
	case session.FieldData:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	case session.FieldResult:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResult(v)
		return nil
	case session.FieldEndCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndCount(v)
		return nil
	case session.FieldTimeout:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimeout(v)
		return nil
	case session.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case session.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SessionMutation) AddedFields() []string {
	var fields []string
	if m.addend_count != nil {
		fields = append(fields, session.FieldEndCount)
	}
	if m.addtimeout != nil {
		fields = append(fields, session.FieldTimeout)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SessionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case session.FieldEndCount:
		return m.AddedEndCount()
	case session.FieldTimeout:
		return m.AddedTimeout()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case session.FieldEndCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEndCount(v)
		return nil
	case session.FieldTimeout:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTimeout(v)
		return nil
	}
	return fmt.Errorf("unknown Session numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SessionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(session.FieldChainID) {
		fields = append(fields, session.FieldChainID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SessionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SessionMutation) ClearField(name string) error {
	switch name {
	case session.FieldChainID:
		m.ClearChainID()
		return nil
	}
	return fmt.Errorf("unknown Session nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SessionMutation) ResetField(name string) error {
	switch name {
	case session.FieldChainID:
		m.ResetChainID()
		return nil
	case session.FieldIsTest:
		m.ResetIsTest()
		return nil
	case session.FieldInfinite:
		m.ResetInfinite()
		return nil
	case session.FieldData:
		m.ResetData()
		return nil
	case session.FieldResult:
		m.ResetResult()
		return nil
	case session.FieldEndCount:
		m.ResetEndCount()
		return nil
	case session.FieldTimeout:
		m.ResetTimeout()
		return nil
	case session.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case session.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SessionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.chain != nil {
		edges = append(edges, session.EdgeChain)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SessionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case session.EdgeChain:
		if id := m.chain; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SessionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SessionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SessionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedchain {
		edges = append(edges, session.EdgeChain)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SessionMutation) EdgeCleared(name string) bool {
	switch name {
	case session.EdgeChain:
		return m.clearedchain
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SessionMutation) ClearEdge(name string) error {
	switch name {
	case session.EdgeChain:
		m.ClearChain()
		return nil
	}
	return fmt.Errorf("unknown Session unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SessionMutation) ResetEdge(name string) error {
	switch name {
	case session.EdgeChain:
		m.ResetChain()
		return nil
	}
	return fmt.Errorf("unknown Session edge %s", name)
}
