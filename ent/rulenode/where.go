// Code generated by ent, DO NOT EDIT.

package rulenode

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/dipper-iot/dipper-engine-server/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ChainID applies equality check predicate on the "chain_id" field. It's identical to ChainIDEQ.
func ChainID(v uint64) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChainID), v))
	})
}

// NodeID applies equality check predicate on the "node_id" field. It's identical to NodeIDEQ.
func NodeID(v string) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNodeID), v))
	})
}

// RuleID applies equality check predicate on the "rule_id" field. It's identical to RuleIDEQ.
func RuleID(v string) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRuleID), v))
	})
}

// Debug applies equality check predicate on the "debug" field. It's identical to DebugEQ.
func Debug(v bool) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDebug), v))
	})
}

// End applies equality check predicate on the "end" field. It's identical to EndEQ.
func End(v bool) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnd), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// ChainIDEQ applies the EQ predicate on the "chain_id" field.
func ChainIDEQ(v uint64) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChainID), v))
	})
}

// ChainIDNEQ applies the NEQ predicate on the "chain_id" field.
func ChainIDNEQ(v uint64) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChainID), v))
	})
}

// ChainIDIn applies the In predicate on the "chain_id" field.
func ChainIDIn(vs ...uint64) predicate.RuleNode {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldChainID), v...))
	})
}

// ChainIDNotIn applies the NotIn predicate on the "chain_id" field.
func ChainIDNotIn(vs ...uint64) predicate.RuleNode {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldChainID), v...))
	})
}

// ChainIDIsNil applies the IsNil predicate on the "chain_id" field.
func ChainIDIsNil() predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChainID)))
	})
}

// ChainIDNotNil applies the NotNil predicate on the "chain_id" field.
func ChainIDNotNil() predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChainID)))
	})
}

// NodeIDEQ applies the EQ predicate on the "node_id" field.
func NodeIDEQ(v string) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNodeID), v))
	})
}

// NodeIDNEQ applies the NEQ predicate on the "node_id" field.
func NodeIDNEQ(v string) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNodeID), v))
	})
}

// NodeIDIn applies the In predicate on the "node_id" field.
func NodeIDIn(vs ...string) predicate.RuleNode {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNodeID), v...))
	})
}

// NodeIDNotIn applies the NotIn predicate on the "node_id" field.
func NodeIDNotIn(vs ...string) predicate.RuleNode {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNodeID), v...))
	})
}

// NodeIDGT applies the GT predicate on the "node_id" field.
func NodeIDGT(v string) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNodeID), v))
	})
}

// NodeIDGTE applies the GTE predicate on the "node_id" field.
func NodeIDGTE(v string) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNodeID), v))
	})
}

// NodeIDLT applies the LT predicate on the "node_id" field.
func NodeIDLT(v string) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNodeID), v))
	})
}

// NodeIDLTE applies the LTE predicate on the "node_id" field.
func NodeIDLTE(v string) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNodeID), v))
	})
}

// NodeIDContains applies the Contains predicate on the "node_id" field.
func NodeIDContains(v string) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNodeID), v))
	})
}

// NodeIDHasPrefix applies the HasPrefix predicate on the "node_id" field.
func NodeIDHasPrefix(v string) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNodeID), v))
	})
}

// NodeIDHasSuffix applies the HasSuffix predicate on the "node_id" field.
func NodeIDHasSuffix(v string) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNodeID), v))
	})
}

// NodeIDEqualFold applies the EqualFold predicate on the "node_id" field.
func NodeIDEqualFold(v string) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNodeID), v))
	})
}

// NodeIDContainsFold applies the ContainsFold predicate on the "node_id" field.
func NodeIDContainsFold(v string) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNodeID), v))
	})
}

// RuleIDEQ applies the EQ predicate on the "rule_id" field.
func RuleIDEQ(v string) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRuleID), v))
	})
}

// RuleIDNEQ applies the NEQ predicate on the "rule_id" field.
func RuleIDNEQ(v string) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRuleID), v))
	})
}

// RuleIDIn applies the In predicate on the "rule_id" field.
func RuleIDIn(vs ...string) predicate.RuleNode {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRuleID), v...))
	})
}

// RuleIDNotIn applies the NotIn predicate on the "rule_id" field.
func RuleIDNotIn(vs ...string) predicate.RuleNode {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRuleID), v...))
	})
}

// RuleIDGT applies the GT predicate on the "rule_id" field.
func RuleIDGT(v string) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRuleID), v))
	})
}

// RuleIDGTE applies the GTE predicate on the "rule_id" field.
func RuleIDGTE(v string) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRuleID), v))
	})
}

// RuleIDLT applies the LT predicate on the "rule_id" field.
func RuleIDLT(v string) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRuleID), v))
	})
}

// RuleIDLTE applies the LTE predicate on the "rule_id" field.
func RuleIDLTE(v string) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRuleID), v))
	})
}

// RuleIDContains applies the Contains predicate on the "rule_id" field.
func RuleIDContains(v string) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRuleID), v))
	})
}

// RuleIDHasPrefix applies the HasPrefix predicate on the "rule_id" field.
func RuleIDHasPrefix(v string) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRuleID), v))
	})
}

// RuleIDHasSuffix applies the HasSuffix predicate on the "rule_id" field.
func RuleIDHasSuffix(v string) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRuleID), v))
	})
}

// RuleIDEqualFold applies the EqualFold predicate on the "rule_id" field.
func RuleIDEqualFold(v string) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRuleID), v))
	})
}

// RuleIDContainsFold applies the ContainsFold predicate on the "rule_id" field.
func RuleIDContainsFold(v string) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRuleID), v))
	})
}

// DebugEQ applies the EQ predicate on the "debug" field.
func DebugEQ(v bool) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDebug), v))
	})
}

// DebugNEQ applies the NEQ predicate on the "debug" field.
func DebugNEQ(v bool) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDebug), v))
	})
}

// EndEQ applies the EQ predicate on the "end" field.
func EndEQ(v bool) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnd), v))
	})
}

// EndNEQ applies the NEQ predicate on the "end" field.
func EndNEQ(v bool) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnd), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.RuleNode {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.RuleNode {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.RuleNode {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.RuleNode {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HasChain applies the HasEdge predicate on the "chain" edge.
func HasChain() predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChainTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ChainTable, ChainColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChainWith applies the HasEdge predicate on the "chain" edge with a given conditions (other predicates).
func HasChainWith(preds ...predicate.RuleChan) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChainInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ChainTable, ChainColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RuleNode) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RuleNode) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RuleNode) predicate.RuleNode {
	return predicate.RuleNode(func(s *sql.Selector) {
		p(s.Not())
	})
}
