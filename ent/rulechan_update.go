// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dipper-iot/dipper-engine-server/ent/predicate"
	"github.com/dipper-iot/dipper-engine-server/ent/rulechan"
	"github.com/dipper-iot/dipper-engine-server/ent/rulenode"
	"github.com/dipper-iot/dipper-engine-server/ent/session"
)

// RuleChanUpdate is the builder for updating RuleChan entities.
type RuleChanUpdate struct {
	config
	hooks    []Hook
	mutation *RuleChanMutation
}

// Where appends a list predicates to the RuleChanUpdate builder.
func (rcu *RuleChanUpdate) Where(ps ...predicate.RuleChan) *RuleChanUpdate {
	rcu.mutation.Where(ps...)
	return rcu
}

// SetName sets the "name" field.
func (rcu *RuleChanUpdate) SetName(s string) *RuleChanUpdate {
	rcu.mutation.SetName(s)
	return rcu
}

// SetDescription sets the "description" field.
func (rcu *RuleChanUpdate) SetDescription(s string) *RuleChanUpdate {
	rcu.mutation.SetDescription(s)
	return rcu
}

// SetRootNode sets the "root_node" field.
func (rcu *RuleChanUpdate) SetRootNode(s string) *RuleChanUpdate {
	rcu.mutation.SetRootNode(s)
	return rcu
}

// SetStatus sets the "status" field.
func (rcu *RuleChanUpdate) SetStatus(r rulechan.Status) *RuleChanUpdate {
	rcu.mutation.SetStatus(r)
	return rcu
}

// SetCreatedAt sets the "created_at" field.
func (rcu *RuleChanUpdate) SetCreatedAt(t time.Time) *RuleChanUpdate {
	rcu.mutation.SetCreatedAt(t)
	return rcu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rcu *RuleChanUpdate) SetNillableCreatedAt(t *time.Time) *RuleChanUpdate {
	if t != nil {
		rcu.SetCreatedAt(*t)
	}
	return rcu
}

// SetUpdatedAt sets the "updated_at" field.
func (rcu *RuleChanUpdate) SetUpdatedAt(t time.Time) *RuleChanUpdate {
	rcu.mutation.SetUpdatedAt(t)
	return rcu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rcu *RuleChanUpdate) SetNillableUpdatedAt(t *time.Time) *RuleChanUpdate {
	if t != nil {
		rcu.SetUpdatedAt(*t)
	}
	return rcu
}

// AddRuleIDs adds the "rules" edge to the RuleNode entity by IDs.
func (rcu *RuleChanUpdate) AddRuleIDs(ids ...uint64) *RuleChanUpdate {
	rcu.mutation.AddRuleIDs(ids...)
	return rcu
}

// AddRules adds the "rules" edges to the RuleNode entity.
func (rcu *RuleChanUpdate) AddRules(r ...*RuleNode) *RuleChanUpdate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcu.AddRuleIDs(ids...)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (rcu *RuleChanUpdate) AddSessionIDs(ids ...uint64) *RuleChanUpdate {
	rcu.mutation.AddSessionIDs(ids...)
	return rcu
}

// AddSessions adds the "sessions" edges to the Session entity.
func (rcu *RuleChanUpdate) AddSessions(s ...*Session) *RuleChanUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return rcu.AddSessionIDs(ids...)
}

// Mutation returns the RuleChanMutation object of the builder.
func (rcu *RuleChanUpdate) Mutation() *RuleChanMutation {
	return rcu.mutation
}

// ClearRules clears all "rules" edges to the RuleNode entity.
func (rcu *RuleChanUpdate) ClearRules() *RuleChanUpdate {
	rcu.mutation.ClearRules()
	return rcu
}

// RemoveRuleIDs removes the "rules" edge to RuleNode entities by IDs.
func (rcu *RuleChanUpdate) RemoveRuleIDs(ids ...uint64) *RuleChanUpdate {
	rcu.mutation.RemoveRuleIDs(ids...)
	return rcu
}

// RemoveRules removes "rules" edges to RuleNode entities.
func (rcu *RuleChanUpdate) RemoveRules(r ...*RuleNode) *RuleChanUpdate {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcu.RemoveRuleIDs(ids...)
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (rcu *RuleChanUpdate) ClearSessions() *RuleChanUpdate {
	rcu.mutation.ClearSessions()
	return rcu
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (rcu *RuleChanUpdate) RemoveSessionIDs(ids ...uint64) *RuleChanUpdate {
	rcu.mutation.RemoveSessionIDs(ids...)
	return rcu
}

// RemoveSessions removes "sessions" edges to Session entities.
func (rcu *RuleChanUpdate) RemoveSessions(s ...*Session) *RuleChanUpdate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return rcu.RemoveSessionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rcu *RuleChanUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(rcu.hooks) == 0 {
		if err = rcu.check(); err != nil {
			return 0, err
		}
		affected, err = rcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RuleChanMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rcu.check(); err != nil {
				return 0, err
			}
			rcu.mutation = mutation
			affected, err = rcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rcu.hooks) - 1; i >= 0; i-- {
			if rcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rcu *RuleChanUpdate) SaveX(ctx context.Context) int {
	affected, err := rcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rcu *RuleChanUpdate) Exec(ctx context.Context) error {
	_, err := rcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcu *RuleChanUpdate) ExecX(ctx context.Context) {
	if err := rcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rcu *RuleChanUpdate) check() error {
	if v, ok := rcu.mutation.Name(); ok {
		if err := rulechan.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "RuleChan.name": %w`, err)}
		}
	}
	if v, ok := rcu.mutation.Description(); ok {
		if err := rulechan.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "RuleChan.description": %w`, err)}
		}
	}
	if v, ok := rcu.mutation.RootNode(); ok {
		if err := rulechan.RootNodeValidator(v); err != nil {
			return &ValidationError{Name: "root_node", err: fmt.Errorf(`ent: validator failed for field "RuleChan.root_node": %w`, err)}
		}
	}
	if v, ok := rcu.mutation.Status(); ok {
		if err := rulechan.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "RuleChan.status": %w`, err)}
		}
	}
	return nil
}

func (rcu *RuleChanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rulechan.Table,
			Columns: rulechan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: rulechan.FieldID,
			},
		},
	}
	if ps := rcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rulechan.FieldName,
		})
	}
	if value, ok := rcu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rulechan.FieldDescription,
		})
	}
	if value, ok := rcu.mutation.RootNode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rulechan.FieldRootNode,
		})
	}
	if value, ok := rcu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: rulechan.FieldStatus,
		})
	}
	if value, ok := rcu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rulechan.FieldCreatedAt,
		})
	}
	if value, ok := rcu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rulechan.FieldUpdatedAt,
		})
	}
	if rcu.mutation.RulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rulechan.RulesTable,
			Columns: []string{rulechan.RulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rulenode.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.RemovedRulesIDs(); len(nodes) > 0 && !rcu.mutation.RulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rulechan.RulesTable,
			Columns: []string{rulechan.RulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rulenode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.RulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rulechan.RulesTable,
			Columns: []string{rulechan.RulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rulenode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rulechan.SessionsTable,
			Columns: []string{rulechan.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: session.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !rcu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rulechan.SessionsTable,
			Columns: []string{rulechan.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: session.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcu.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rulechan.SessionsTable,
			Columns: []string{rulechan.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: session.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rulechan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// RuleChanUpdateOne is the builder for updating a single RuleChan entity.
type RuleChanUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RuleChanMutation
}

// SetName sets the "name" field.
func (rcuo *RuleChanUpdateOne) SetName(s string) *RuleChanUpdateOne {
	rcuo.mutation.SetName(s)
	return rcuo
}

// SetDescription sets the "description" field.
func (rcuo *RuleChanUpdateOne) SetDescription(s string) *RuleChanUpdateOne {
	rcuo.mutation.SetDescription(s)
	return rcuo
}

// SetRootNode sets the "root_node" field.
func (rcuo *RuleChanUpdateOne) SetRootNode(s string) *RuleChanUpdateOne {
	rcuo.mutation.SetRootNode(s)
	return rcuo
}

// SetStatus sets the "status" field.
func (rcuo *RuleChanUpdateOne) SetStatus(r rulechan.Status) *RuleChanUpdateOne {
	rcuo.mutation.SetStatus(r)
	return rcuo
}

// SetCreatedAt sets the "created_at" field.
func (rcuo *RuleChanUpdateOne) SetCreatedAt(t time.Time) *RuleChanUpdateOne {
	rcuo.mutation.SetCreatedAt(t)
	return rcuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rcuo *RuleChanUpdateOne) SetNillableCreatedAt(t *time.Time) *RuleChanUpdateOne {
	if t != nil {
		rcuo.SetCreatedAt(*t)
	}
	return rcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (rcuo *RuleChanUpdateOne) SetUpdatedAt(t time.Time) *RuleChanUpdateOne {
	rcuo.mutation.SetUpdatedAt(t)
	return rcuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rcuo *RuleChanUpdateOne) SetNillableUpdatedAt(t *time.Time) *RuleChanUpdateOne {
	if t != nil {
		rcuo.SetUpdatedAt(*t)
	}
	return rcuo
}

// AddRuleIDs adds the "rules" edge to the RuleNode entity by IDs.
func (rcuo *RuleChanUpdateOne) AddRuleIDs(ids ...uint64) *RuleChanUpdateOne {
	rcuo.mutation.AddRuleIDs(ids...)
	return rcuo
}

// AddRules adds the "rules" edges to the RuleNode entity.
func (rcuo *RuleChanUpdateOne) AddRules(r ...*RuleNode) *RuleChanUpdateOne {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcuo.AddRuleIDs(ids...)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (rcuo *RuleChanUpdateOne) AddSessionIDs(ids ...uint64) *RuleChanUpdateOne {
	rcuo.mutation.AddSessionIDs(ids...)
	return rcuo
}

// AddSessions adds the "sessions" edges to the Session entity.
func (rcuo *RuleChanUpdateOne) AddSessions(s ...*Session) *RuleChanUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return rcuo.AddSessionIDs(ids...)
}

// Mutation returns the RuleChanMutation object of the builder.
func (rcuo *RuleChanUpdateOne) Mutation() *RuleChanMutation {
	return rcuo.mutation
}

// ClearRules clears all "rules" edges to the RuleNode entity.
func (rcuo *RuleChanUpdateOne) ClearRules() *RuleChanUpdateOne {
	rcuo.mutation.ClearRules()
	return rcuo
}

// RemoveRuleIDs removes the "rules" edge to RuleNode entities by IDs.
func (rcuo *RuleChanUpdateOne) RemoveRuleIDs(ids ...uint64) *RuleChanUpdateOne {
	rcuo.mutation.RemoveRuleIDs(ids...)
	return rcuo
}

// RemoveRules removes "rules" edges to RuleNode entities.
func (rcuo *RuleChanUpdateOne) RemoveRules(r ...*RuleNode) *RuleChanUpdateOne {
	ids := make([]uint64, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rcuo.RemoveRuleIDs(ids...)
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (rcuo *RuleChanUpdateOne) ClearSessions() *RuleChanUpdateOne {
	rcuo.mutation.ClearSessions()
	return rcuo
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (rcuo *RuleChanUpdateOne) RemoveSessionIDs(ids ...uint64) *RuleChanUpdateOne {
	rcuo.mutation.RemoveSessionIDs(ids...)
	return rcuo
}

// RemoveSessions removes "sessions" edges to Session entities.
func (rcuo *RuleChanUpdateOne) RemoveSessions(s ...*Session) *RuleChanUpdateOne {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return rcuo.RemoveSessionIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rcuo *RuleChanUpdateOne) Select(field string, fields ...string) *RuleChanUpdateOne {
	rcuo.fields = append([]string{field}, fields...)
	return rcuo
}

// Save executes the query and returns the updated RuleChan entity.
func (rcuo *RuleChanUpdateOne) Save(ctx context.Context) (*RuleChan, error) {
	var (
		err  error
		node *RuleChan
	)
	if len(rcuo.hooks) == 0 {
		if err = rcuo.check(); err != nil {
			return nil, err
		}
		node, err = rcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RuleChanMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rcuo.check(); err != nil {
				return nil, err
			}
			rcuo.mutation = mutation
			node, err = rcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rcuo.hooks) - 1; i >= 0; i-- {
			if rcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rcuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rcuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*RuleChan)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RuleChanMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rcuo *RuleChanUpdateOne) SaveX(ctx context.Context) *RuleChan {
	node, err := rcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rcuo *RuleChanUpdateOne) Exec(ctx context.Context) error {
	_, err := rcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcuo *RuleChanUpdateOne) ExecX(ctx context.Context) {
	if err := rcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rcuo *RuleChanUpdateOne) check() error {
	if v, ok := rcuo.mutation.Name(); ok {
		if err := rulechan.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "RuleChan.name": %w`, err)}
		}
	}
	if v, ok := rcuo.mutation.Description(); ok {
		if err := rulechan.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "RuleChan.description": %w`, err)}
		}
	}
	if v, ok := rcuo.mutation.RootNode(); ok {
		if err := rulechan.RootNodeValidator(v); err != nil {
			return &ValidationError{Name: "root_node", err: fmt.Errorf(`ent: validator failed for field "RuleChan.root_node": %w`, err)}
		}
	}
	if v, ok := rcuo.mutation.Status(); ok {
		if err := rulechan.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "RuleChan.status": %w`, err)}
		}
	}
	return nil
}

func (rcuo *RuleChanUpdateOne) sqlSave(ctx context.Context) (_node *RuleChan, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rulechan.Table,
			Columns: rulechan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: rulechan.FieldID,
			},
		},
	}
	id, ok := rcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RuleChan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rulechan.FieldID)
		for _, f := range fields {
			if !rulechan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rulechan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rcuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rulechan.FieldName,
		})
	}
	if value, ok := rcuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rulechan.FieldDescription,
		})
	}
	if value, ok := rcuo.mutation.RootNode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rulechan.FieldRootNode,
		})
	}
	if value, ok := rcuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: rulechan.FieldStatus,
		})
	}
	if value, ok := rcuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rulechan.FieldCreatedAt,
		})
	}
	if value, ok := rcuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rulechan.FieldUpdatedAt,
		})
	}
	if rcuo.mutation.RulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rulechan.RulesTable,
			Columns: []string{rulechan.RulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rulenode.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.RemovedRulesIDs(); len(nodes) > 0 && !rcuo.mutation.RulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rulechan.RulesTable,
			Columns: []string{rulechan.RulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rulenode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.RulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rulechan.RulesTable,
			Columns: []string{rulechan.RulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: rulenode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rcuo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rulechan.SessionsTable,
			Columns: []string{rulechan.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: session.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !rcuo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rulechan.SessionsTable,
			Columns: []string{rulechan.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: session.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rcuo.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rulechan.SessionsTable,
			Columns: []string{rulechan.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: session.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RuleChan{config: rcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rulechan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
