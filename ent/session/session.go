// Code generated by ent, DO NOT EDIT.

package session

import (
	"time"
)

const (
	// Label holds the string label denoting the session type in the database.
	Label = "session"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldChainID holds the string denoting the chain_id field in the database.
	FieldChainID = "chain_id"
	// FieldIsTest holds the string denoting the is_test field in the database.
	FieldIsTest = "is_test"
	// FieldInfinite holds the string denoting the infinite field in the database.
	FieldInfinite = "infinite"
	// FieldData holds the string denoting the data field in the database.
	FieldData = "data"
	// FieldResult holds the string denoting the result field in the database.
	FieldResult = "result"
	// FieldEndCount holds the string denoting the end_count field in the database.
	FieldEndCount = "end_count"
	// FieldTimeout holds the string denoting the timeout field in the database.
	FieldTimeout = "timeout"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeChain holds the string denoting the chain edge name in mutations.
	EdgeChain = "chain"
	// Table holds the table name of the session in the database.
	Table = "sessions"
	// ChainTable is the table that holds the chain relation/edge.
	ChainTable = "sessions"
	// ChainInverseTable is the table name for the RuleChan entity.
	// It exists in this package in order to avoid circular dependency with the "rulechan" package.
	ChainInverseTable = "rule_chan"
	// ChainColumn is the table column denoting the chain relation/edge.
	ChainColumn = "chain_id"
)

// Columns holds all SQL columns for session fields.
var Columns = []string{
	FieldID,
	FieldChainID,
	FieldIsTest,
	FieldInfinite,
	FieldData,
	FieldResult,
	FieldEndCount,
	FieldTimeout,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsTest holds the default value on creation for the "is_test" field.
	DefaultIsTest bool
	// DefaultInfinite holds the default value on creation for the "infinite" field.
	DefaultInfinite bool
	// DefaultData holds the default value on creation for the "data" field.
	DefaultData map[string]interface{}
	// DefaultResult holds the default value on creation for the "result" field.
	DefaultResult map[string]interface{}
	// DefaultEndCount holds the default value on creation for the "end_count" field.
	DefaultEndCount int
	// DefaultTimeout holds the default value on creation for the "timeout" field.
	DefaultTimeout int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)
