// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/dipper-iot/dipper-engine-server/ent/rulechan"
	"github.com/dipper-iot/dipper-engine-server/ent/rulenode"
)

// RuleNode is the model entity for the RuleNode schema.
type RuleNode struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// ChainID holds the value of the "chain_id" field.
	ChainID uint64 `json:"chain_id,omitempty"`
	// NodeID holds the value of the "node_id" field.
	NodeID string `json:"node_id,omitempty"`
	// RuleID holds the value of the "rule_id" field.
	RuleID string `json:"rule_id,omitempty"`
	// Option holds the value of the "option" field.
	Option map[string]interface{} `json:"option,omitempty"`
	// Debug holds the value of the "debug" field.
	Debug bool `json:"debug,omitempty"`
	// End holds the value of the "end" field.
	End bool `json:"end,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RuleNodeQuery when eager-loading is set.
	Edges RuleNodeEdges `json:"edges"`
}

// RuleNodeEdges holds the relations/edges for other nodes in the graph.
type RuleNodeEdges struct {
	// Chain holds the value of the chain edge.
	Chain *RuleChan `json:"chain,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ChainOrErr returns the Chain value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RuleNodeEdges) ChainOrErr() (*RuleChan, error) {
	if e.loadedTypes[0] {
		if e.Chain == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: rulechan.Label}
		}
		return e.Chain, nil
	}
	return nil, &NotLoadedError{edge: "chain"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RuleNode) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rulenode.FieldOption:
			values[i] = new([]byte)
		case rulenode.FieldDebug, rulenode.FieldEnd:
			values[i] = new(sql.NullBool)
		case rulenode.FieldID, rulenode.FieldChainID:
			values[i] = new(sql.NullInt64)
		case rulenode.FieldNodeID, rulenode.FieldRuleID:
			values[i] = new(sql.NullString)
		case rulenode.FieldCreatedAt, rulenode.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type RuleNode", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RuleNode fields.
func (rn *RuleNode) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rulenode.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rn.ID = uint64(value.Int64)
		case rulenode.FieldChainID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chain_id", values[i])
			} else if value.Valid {
				rn.ChainID = uint64(value.Int64)
			}
		case rulenode.FieldNodeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_id", values[i])
			} else if value.Valid {
				rn.NodeID = value.String
			}
		case rulenode.FieldRuleID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rule_id", values[i])
			} else if value.Valid {
				rn.RuleID = value.String
			}
		case rulenode.FieldOption:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field option", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &rn.Option); err != nil {
					return fmt.Errorf("unmarshal field option: %w", err)
				}
			}
		case rulenode.FieldDebug:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field debug", values[i])
			} else if value.Valid {
				rn.Debug = value.Bool
			}
		case rulenode.FieldEnd:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field end", values[i])
			} else if value.Valid {
				rn.End = value.Bool
			}
		case rulenode.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rn.CreatedAt = value.Time
			}
		case rulenode.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rn.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryChain queries the "chain" edge of the RuleNode entity.
func (rn *RuleNode) QueryChain() *RuleChanQuery {
	return (&RuleNodeClient{config: rn.config}).QueryChain(rn)
}

// Update returns a builder for updating this RuleNode.
// Note that you need to call RuleNode.Unwrap() before calling this method if this RuleNode
// was returned from a transaction, and the transaction was committed or rolled back.
func (rn *RuleNode) Update() *RuleNodeUpdateOne {
	return (&RuleNodeClient{config: rn.config}).UpdateOne(rn)
}

// Unwrap unwraps the RuleNode entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rn *RuleNode) Unwrap() *RuleNode {
	_tx, ok := rn.config.driver.(*txDriver)
	if !ok {
		panic("ent: RuleNode is not a transactional entity")
	}
	rn.config.driver = _tx.drv
	return rn
}

// String implements the fmt.Stringer.
func (rn *RuleNode) String() string {
	var builder strings.Builder
	builder.WriteString("RuleNode(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rn.ID))
	builder.WriteString("chain_id=")
	builder.WriteString(fmt.Sprintf("%v", rn.ChainID))
	builder.WriteString(", ")
	builder.WriteString("node_id=")
	builder.WriteString(rn.NodeID)
	builder.WriteString(", ")
	builder.WriteString("rule_id=")
	builder.WriteString(rn.RuleID)
	builder.WriteString(", ")
	builder.WriteString("option=")
	builder.WriteString(fmt.Sprintf("%v", rn.Option))
	builder.WriteString(", ")
	builder.WriteString("debug=")
	builder.WriteString(fmt.Sprintf("%v", rn.Debug))
	builder.WriteString(", ")
	builder.WriteString("end=")
	builder.WriteString(fmt.Sprintf("%v", rn.End))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rn.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rn.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// RuleNodes is a parsable slice of RuleNode.
type RuleNodes []*RuleNode

func (rn RuleNodes) config(cfg config) {
	for _i := range rn {
		rn[_i].config = cfg
	}
}
