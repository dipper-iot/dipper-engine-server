// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/dipper-iot/dipper-engine-server/ent/migrate"

	"github.com/dipper-iot/dipper-engine-server/ent/rulechan"
	"github.com/dipper-iot/dipper-engine-server/ent/rulenode"
	"github.com/dipper-iot/dipper-engine-server/ent/session"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// RuleChan is the client for interacting with the RuleChan builders.
	RuleChan *RuleChanClient
	// RuleNode is the client for interacting with the RuleNode builders.
	RuleNode *RuleNodeClient
	// Session is the client for interacting with the Session builders.
	Session *SessionClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.RuleChan = NewRuleChanClient(c.config)
	c.RuleNode = NewRuleNodeClient(c.config)
	c.Session = NewSessionClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		RuleChan: NewRuleChanClient(cfg),
		RuleNode: NewRuleNodeClient(cfg),
		Session:  NewSessionClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		RuleChan: NewRuleChanClient(cfg),
		RuleNode: NewRuleNodeClient(cfg),
		Session:  NewSessionClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		RuleChan.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.RuleChan.Use(hooks...)
	c.RuleNode.Use(hooks...)
	c.Session.Use(hooks...)
}

// RuleChanClient is a client for the RuleChan schema.
type RuleChanClient struct {
	config
}

// NewRuleChanClient returns a client for the RuleChan from the given config.
func NewRuleChanClient(c config) *RuleChanClient {
	return &RuleChanClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rulechan.Hooks(f(g(h())))`.
func (c *RuleChanClient) Use(hooks ...Hook) {
	c.hooks.RuleChan = append(c.hooks.RuleChan, hooks...)
}

// Create returns a builder for creating a RuleChan entity.
func (c *RuleChanClient) Create() *RuleChanCreate {
	mutation := newRuleChanMutation(c.config, OpCreate)
	return &RuleChanCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RuleChan entities.
func (c *RuleChanClient) CreateBulk(builders ...*RuleChanCreate) *RuleChanCreateBulk {
	return &RuleChanCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RuleChan.
func (c *RuleChanClient) Update() *RuleChanUpdate {
	mutation := newRuleChanMutation(c.config, OpUpdate)
	return &RuleChanUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RuleChanClient) UpdateOne(rc *RuleChan) *RuleChanUpdateOne {
	mutation := newRuleChanMutation(c.config, OpUpdateOne, withRuleChan(rc))
	return &RuleChanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RuleChanClient) UpdateOneID(id uint64) *RuleChanUpdateOne {
	mutation := newRuleChanMutation(c.config, OpUpdateOne, withRuleChanID(id))
	return &RuleChanUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RuleChan.
func (c *RuleChanClient) Delete() *RuleChanDelete {
	mutation := newRuleChanMutation(c.config, OpDelete)
	return &RuleChanDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RuleChanClient) DeleteOne(rc *RuleChan) *RuleChanDeleteOne {
	return c.DeleteOneID(rc.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *RuleChanClient) DeleteOneID(id uint64) *RuleChanDeleteOne {
	builder := c.Delete().Where(rulechan.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RuleChanDeleteOne{builder}
}

// Query returns a query builder for RuleChan.
func (c *RuleChanClient) Query() *RuleChanQuery {
	return &RuleChanQuery{
		config: c.config,
	}
}

// Get returns a RuleChan entity by its id.
func (c *RuleChanClient) Get(ctx context.Context, id uint64) (*RuleChan, error) {
	return c.Query().Where(rulechan.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RuleChanClient) GetX(ctx context.Context, id uint64) *RuleChan {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRules queries the rules edge of a RuleChan.
func (c *RuleChanClient) QueryRules(rc *RuleChan) *RuleNodeQuery {
	query := &RuleNodeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rulechan.Table, rulechan.FieldID, id),
			sqlgraph.To(rulenode.Table, rulenode.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rulechan.RulesTable, rulechan.RulesColumn),
		)
		fromV = sqlgraph.Neighbors(rc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySessions queries the sessions edge of a RuleChan.
func (c *RuleChanClient) QuerySessions(rc *RuleChan) *SessionQuery {
	query := &SessionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rulechan.Table, rulechan.FieldID, id),
			sqlgraph.To(session.Table, session.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rulechan.SessionsTable, rulechan.SessionsColumn),
		)
		fromV = sqlgraph.Neighbors(rc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RuleChanClient) Hooks() []Hook {
	return c.hooks.RuleChan
}

// RuleNodeClient is a client for the RuleNode schema.
type RuleNodeClient struct {
	config
}

// NewRuleNodeClient returns a client for the RuleNode from the given config.
func NewRuleNodeClient(c config) *RuleNodeClient {
	return &RuleNodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rulenode.Hooks(f(g(h())))`.
func (c *RuleNodeClient) Use(hooks ...Hook) {
	c.hooks.RuleNode = append(c.hooks.RuleNode, hooks...)
}

// Create returns a builder for creating a RuleNode entity.
func (c *RuleNodeClient) Create() *RuleNodeCreate {
	mutation := newRuleNodeMutation(c.config, OpCreate)
	return &RuleNodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RuleNode entities.
func (c *RuleNodeClient) CreateBulk(builders ...*RuleNodeCreate) *RuleNodeCreateBulk {
	return &RuleNodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RuleNode.
func (c *RuleNodeClient) Update() *RuleNodeUpdate {
	mutation := newRuleNodeMutation(c.config, OpUpdate)
	return &RuleNodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RuleNodeClient) UpdateOne(rn *RuleNode) *RuleNodeUpdateOne {
	mutation := newRuleNodeMutation(c.config, OpUpdateOne, withRuleNode(rn))
	return &RuleNodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RuleNodeClient) UpdateOneID(id uint64) *RuleNodeUpdateOne {
	mutation := newRuleNodeMutation(c.config, OpUpdateOne, withRuleNodeID(id))
	return &RuleNodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RuleNode.
func (c *RuleNodeClient) Delete() *RuleNodeDelete {
	mutation := newRuleNodeMutation(c.config, OpDelete)
	return &RuleNodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RuleNodeClient) DeleteOne(rn *RuleNode) *RuleNodeDeleteOne {
	return c.DeleteOneID(rn.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *RuleNodeClient) DeleteOneID(id uint64) *RuleNodeDeleteOne {
	builder := c.Delete().Where(rulenode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RuleNodeDeleteOne{builder}
}

// Query returns a query builder for RuleNode.
func (c *RuleNodeClient) Query() *RuleNodeQuery {
	return &RuleNodeQuery{
		config: c.config,
	}
}

// Get returns a RuleNode entity by its id.
func (c *RuleNodeClient) Get(ctx context.Context, id uint64) (*RuleNode, error) {
	return c.Query().Where(rulenode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RuleNodeClient) GetX(ctx context.Context, id uint64) *RuleNode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChain queries the chain edge of a RuleNode.
func (c *RuleNodeClient) QueryChain(rn *RuleNode) *RuleChanQuery {
	query := &RuleChanQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rn.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rulenode.Table, rulenode.FieldID, id),
			sqlgraph.To(rulechan.Table, rulechan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, rulenode.ChainTable, rulenode.ChainColumn),
		)
		fromV = sqlgraph.Neighbors(rn.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RuleNodeClient) Hooks() []Hook {
	return c.hooks.RuleNode
}

// SessionClient is a client for the Session schema.
type SessionClient struct {
	config
}

// NewSessionClient returns a client for the Session from the given config.
func NewSessionClient(c config) *SessionClient {
	return &SessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `session.Hooks(f(g(h())))`.
func (c *SessionClient) Use(hooks ...Hook) {
	c.hooks.Session = append(c.hooks.Session, hooks...)
}

// Create returns a builder for creating a Session entity.
func (c *SessionClient) Create() *SessionCreate {
	mutation := newSessionMutation(c.config, OpCreate)
	return &SessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Session entities.
func (c *SessionClient) CreateBulk(builders ...*SessionCreate) *SessionCreateBulk {
	return &SessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Session.
func (c *SessionClient) Update() *SessionUpdate {
	mutation := newSessionMutation(c.config, OpUpdate)
	return &SessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SessionClient) UpdateOne(s *Session) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSession(s))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SessionClient) UpdateOneID(id uint64) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSessionID(id))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Session.
func (c *SessionClient) Delete() *SessionDelete {
	mutation := newSessionMutation(c.config, OpDelete)
	return &SessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SessionClient) DeleteOne(s *Session) *SessionDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *SessionClient) DeleteOneID(id uint64) *SessionDeleteOne {
	builder := c.Delete().Where(session.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SessionDeleteOne{builder}
}

// Query returns a query builder for Session.
func (c *SessionClient) Query() *SessionQuery {
	return &SessionQuery{
		config: c.config,
	}
}

// Get returns a Session entity by its id.
func (c *SessionClient) Get(ctx context.Context, id uint64) (*Session, error) {
	return c.Query().Where(session.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SessionClient) GetX(ctx context.Context, id uint64) *Session {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChain queries the chain edge of a Session.
func (c *SessionClient) QueryChain(s *Session) *RuleChanQuery {
	query := &RuleChanQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(session.Table, session.FieldID, id),
			sqlgraph.To(rulechan.Table, rulechan.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, session.ChainTable, session.ChainColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SessionClient) Hooks() []Hook {
	return c.hooks.Session
}
