// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/dipper-iot/dipper-engine-server/graph/model"
	"github.com/dipper-iot/dipper-engine-server/models"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Chan() ChanResolver
	Mutation() MutationResolver
	Query() QueryResolver
	SessionInfo() SessionInfoResolver
	Subscription() SubscriptionResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Chan struct {
		CreatedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Nodes       func(childComplexity int) int
		RootNode    func(childComplexity int) int
		Status      func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	ErrorEngine struct {
		Code        func(childComplexity int) int
		ErrorDetail func(childComplexity int) int
		Message     func(childComplexity int) int
	}

	ListChan struct {
		List  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	ListSessionInfo struct {
		Sessions func(childComplexity int) int
		Total    func(childComplexity int) int
	}

	Mutation struct {
		AddSession         func(childComplexity int, input model.SessionRequest) int
		CreateChan         func(childComplexity int, input model.InputChan) int
		DeleteChan         func(childComplexity int, id uint64) int
		DeleteNode         func(childComplexity int, id uint64) int
		StopSession        func(childComplexity int, id uint64) int
		UpdateChan         func(childComplexity int, id uint64, input model.InputChan) int
		UpdateNode         func(childComplexity int, chanID uint64, input model.InputNode) int
		UpdateNodes        func(childComplexity int, chanID uint64, input []*model.InputNode) int
		UpdateRootNodeChan func(childComplexity int, id uint64, rootNode string) int
		UpdateStatusChan   func(childComplexity int, input model.SetStatusChan) int
		Version            func(childComplexity int) int
	}

	Node struct {
		ChainID   func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		Debug     func(childComplexity int) int
		End       func(childComplexity int) int
		ID        func(childComplexity int) int
		NodeID    func(childComplexity int) int
		Option    func(childComplexity int) int
		RuleID    func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	Query struct {
		GetChan     func(childComplexity int, id uint64) int
		GetNode     func(childComplexity int, id uint64) int
		GetSession  func(childComplexity int, id uint64) int
		ListChan    func(childComplexity int, input models.ListChanRequest) int
		ListSession func(childComplexity int, input model.SessionListRequest) int
		Version     func(childComplexity int) int
	}

	SessionInfo struct {
		Chan     func(childComplexity int) int
		ChanID   func(childComplexity int) int
		ID       func(childComplexity int) int
		Infinity func(childComplexity int) int
	}

	SessionOutput struct {
		ChanID     func(childComplexity int) int
		Data       func(childComplexity int) int
		Error      func(childComplexity int) int
		FormEngine func(childComplexity int) int
		SessionID  func(childComplexity int) int
		Type       func(childComplexity int) int
	}

	Subscription struct {
		Debug func(childComplexity int, input *model.DebugFilter) int
	}

	Version struct {
		Version func(childComplexity int) int
	}
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Chan.created_at":
		if e.complexity.Chan.CreatedAt == nil {
			break
		}

		return e.complexity.Chan.CreatedAt(childComplexity), true

	case "Chan.description":
		if e.complexity.Chan.Description == nil {
			break
		}

		return e.complexity.Chan.Description(childComplexity), true

	case "Chan.id":
		if e.complexity.Chan.ID == nil {
			break
		}

		return e.complexity.Chan.ID(childComplexity), true

	case "Chan.name":
		if e.complexity.Chan.Name == nil {
			break
		}

		return e.complexity.Chan.Name(childComplexity), true

	case "Chan.nodes":
		if e.complexity.Chan.Nodes == nil {
			break
		}

		return e.complexity.Chan.Nodes(childComplexity), true

	case "Chan.root_node":
		if e.complexity.Chan.RootNode == nil {
			break
		}

		return e.complexity.Chan.RootNode(childComplexity), true

	case "Chan.status":
		if e.complexity.Chan.Status == nil {
			break
		}

		return e.complexity.Chan.Status(childComplexity), true

	case "Chan.updated_at":
		if e.complexity.Chan.UpdatedAt == nil {
			break
		}

		return e.complexity.Chan.UpdatedAt(childComplexity), true

	case "ErrorEngine.code":
		if e.complexity.ErrorEngine.Code == nil {
			break
		}

		return e.complexity.ErrorEngine.Code(childComplexity), true

	case "ErrorEngine.error_detail":
		if e.complexity.ErrorEngine.ErrorDetail == nil {
			break
		}

		return e.complexity.ErrorEngine.ErrorDetail(childComplexity), true

	case "ErrorEngine.message":
		if e.complexity.ErrorEngine.Message == nil {
			break
		}

		return e.complexity.ErrorEngine.Message(childComplexity), true

	case "ListChan.list":
		if e.complexity.ListChan.List == nil {
			break
		}

		return e.complexity.ListChan.List(childComplexity), true

	case "ListChan.total":
		if e.complexity.ListChan.Total == nil {
			break
		}

		return e.complexity.ListChan.Total(childComplexity), true

	case "ListSessionInfo.sessions":
		if e.complexity.ListSessionInfo.Sessions == nil {
			break
		}

		return e.complexity.ListSessionInfo.Sessions(childComplexity), true

	case "ListSessionInfo.total":
		if e.complexity.ListSessionInfo.Total == nil {
			break
		}

		return e.complexity.ListSessionInfo.Total(childComplexity), true

	case "Mutation.AddSession":
		if e.complexity.Mutation.AddSession == nil {
			break
		}

		args, err := ec.field_Mutation_AddSession_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddSession(childComplexity, args["input"].(model.SessionRequest)), true

	case "Mutation.CreateChan":
		if e.complexity.Mutation.CreateChan == nil {
			break
		}

		args, err := ec.field_Mutation_CreateChan_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateChan(childComplexity, args["input"].(model.InputChan)), true

	case "Mutation.DeleteChan":
		if e.complexity.Mutation.DeleteChan == nil {
			break
		}

		args, err := ec.field_Mutation_DeleteChan_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteChan(childComplexity, args["id"].(uint64)), true

	case "Mutation.DeleteNode":
		if e.complexity.Mutation.DeleteNode == nil {
			break
		}

		args, err := ec.field_Mutation_DeleteNode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteNode(childComplexity, args["id"].(uint64)), true

	case "Mutation.StopSession":
		if e.complexity.Mutation.StopSession == nil {
			break
		}

		args, err := ec.field_Mutation_StopSession_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StopSession(childComplexity, args["id"].(uint64)), true

	case "Mutation.UpdateChan":
		if e.complexity.Mutation.UpdateChan == nil {
			break
		}

		args, err := ec.field_Mutation_UpdateChan_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateChan(childComplexity, args["id"].(uint64), args["input"].(model.InputChan)), true

	case "Mutation.UpdateNode":
		if e.complexity.Mutation.UpdateNode == nil {
			break
		}

		args, err := ec.field_Mutation_UpdateNode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateNode(childComplexity, args["chanId"].(uint64), args["input"].(model.InputNode)), true

	case "Mutation.UpdateNodes":
		if e.complexity.Mutation.UpdateNodes == nil {
			break
		}

		args, err := ec.field_Mutation_UpdateNodes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateNodes(childComplexity, args["chanId"].(uint64), args["input"].([]*model.InputNode)), true

	case "Mutation.UpdateRootNodeChan":
		if e.complexity.Mutation.UpdateRootNodeChan == nil {
			break
		}

		args, err := ec.field_Mutation_UpdateRootNodeChan_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRootNodeChan(childComplexity, args["id"].(uint64), args["rootNode"].(string)), true

	case "Mutation.UpdateStatusChan":
		if e.complexity.Mutation.UpdateStatusChan == nil {
			break
		}

		args, err := ec.field_Mutation_UpdateStatusChan_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateStatusChan(childComplexity, args["input"].(model.SetStatusChan)), true

	case "Mutation.version":
		if e.complexity.Mutation.Version == nil {
			break
		}

		return e.complexity.Mutation.Version(childComplexity), true

	case "Node.chain_id":
		if e.complexity.Node.ChainID == nil {
			break
		}

		return e.complexity.Node.ChainID(childComplexity), true

	case "Node.created_at":
		if e.complexity.Node.CreatedAt == nil {
			break
		}

		return e.complexity.Node.CreatedAt(childComplexity), true

	case "Node.debug":
		if e.complexity.Node.Debug == nil {
			break
		}

		return e.complexity.Node.Debug(childComplexity), true

	case "Node.end":
		if e.complexity.Node.End == nil {
			break
		}

		return e.complexity.Node.End(childComplexity), true

	case "Node.id":
		if e.complexity.Node.ID == nil {
			break
		}

		return e.complexity.Node.ID(childComplexity), true

	case "Node.node_id":
		if e.complexity.Node.NodeID == nil {
			break
		}

		return e.complexity.Node.NodeID(childComplexity), true

	case "Node.option":
		if e.complexity.Node.Option == nil {
			break
		}

		return e.complexity.Node.Option(childComplexity), true

	case "Node.rule_id":
		if e.complexity.Node.RuleID == nil {
			break
		}

		return e.complexity.Node.RuleID(childComplexity), true

	case "Node.updated_at":
		if e.complexity.Node.UpdatedAt == nil {
			break
		}

		return e.complexity.Node.UpdatedAt(childComplexity), true

	case "Query.GetChan":
		if e.complexity.Query.GetChan == nil {
			break
		}

		args, err := ec.field_Query_GetChan_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetChan(childComplexity, args["id"].(uint64)), true

	case "Query.GetNode":
		if e.complexity.Query.GetNode == nil {
			break
		}

		args, err := ec.field_Query_GetNode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetNode(childComplexity, args["id"].(uint64)), true

	case "Query.GetSession":
		if e.complexity.Query.GetSession == nil {
			break
		}

		args, err := ec.field_Query_GetSession_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSession(childComplexity, args["id"].(uint64)), true

	case "Query.ListChan":
		if e.complexity.Query.ListChan == nil {
			break
		}

		args, err := ec.field_Query_ListChan_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListChan(childComplexity, args["input"].(models.ListChanRequest)), true

	case "Query.ListSession":
		if e.complexity.Query.ListSession == nil {
			break
		}

		args, err := ec.field_Query_ListSession_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListSession(childComplexity, args["input"].(model.SessionListRequest)), true

	case "Query.version":
		if e.complexity.Query.Version == nil {
			break
		}

		return e.complexity.Query.Version(childComplexity), true

	case "SessionInfo.chan":
		if e.complexity.SessionInfo.Chan == nil {
			break
		}

		return e.complexity.SessionInfo.Chan(childComplexity), true

	case "SessionInfo.chan_id":
		if e.complexity.SessionInfo.ChanID == nil {
			break
		}

		return e.complexity.SessionInfo.ChanID(childComplexity), true

	case "SessionInfo.id":
		if e.complexity.SessionInfo.ID == nil {
			break
		}

		return e.complexity.SessionInfo.ID(childComplexity), true

	case "SessionInfo.infinity":
		if e.complexity.SessionInfo.Infinity == nil {
			break
		}

		return e.complexity.SessionInfo.Infinity(childComplexity), true

	case "SessionOutput.chan_id":
		if e.complexity.SessionOutput.ChanID == nil {
			break
		}

		return e.complexity.SessionOutput.ChanID(childComplexity), true

	case "SessionOutput.data":
		if e.complexity.SessionOutput.Data == nil {
			break
		}

		return e.complexity.SessionOutput.Data(childComplexity), true

	case "SessionOutput.error":
		if e.complexity.SessionOutput.Error == nil {
			break
		}

		return e.complexity.SessionOutput.Error(childComplexity), true

	case "SessionOutput.form_engine":
		if e.complexity.SessionOutput.FormEngine == nil {
			break
		}

		return e.complexity.SessionOutput.FormEngine(childComplexity), true

	case "SessionOutput.session_id":
		if e.complexity.SessionOutput.SessionID == nil {
			break
		}

		return e.complexity.SessionOutput.SessionID(childComplexity), true

	case "SessionOutput.type":
		if e.complexity.SessionOutput.Type == nil {
			break
		}

		return e.complexity.SessionOutput.Type(childComplexity), true

	case "Subscription.Debug":
		if e.complexity.Subscription.Debug == nil {
			break
		}

		args, err := ec.field_Subscription_Debug_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Subscription.Debug(childComplexity, args["input"].(*model.DebugFilter)), true

	case "Version.version":
		if e.complexity.Version.Version == nil {
			break
		}

		return e.complexity.Version.Version(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputDebugFilter,
		ec.unmarshalInputInputChan,
		ec.unmarshalInputInputNode,
		ec.unmarshalInputListChanRequest,
		ec.unmarshalInputSessionListRequest,
		ec.unmarshalInputSessionRequest,
		ec.unmarshalInputSetStatusChan,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Subscription:
		next := ec._Subscription(ctx, rc.Operation.SelectionSet)

		var buf bytes.Buffer
		return func(ctx context.Context) *graphql.Response {
			buf.Reset()
			data := next(ctx)

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema/schema.graphqls", Input: `# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Uint64
scalar Timestamp
scalar Map
scalar Time
scalar Any

type Version {
    version: String!
}

type Query {
    version: Version!
}


type Mutation {
    version: Version!
}
`, BuiltIn: false},
	{Name: "../schema/chan/chan.mutation.graphql", Input: `extend type Mutation {
    CreateChan(input: InputChan!): Boolean!
    UpdateChan(id: Uint64!, input: InputChan!): Boolean!
    UpdateStatusChan(input: SetStatusChan!): Boolean!
    UpdateRootNodeChan(id: Uint64!, rootNode: String!): Boolean!
    DeleteChan(id: Uint64!): Boolean!
}`, BuiltIn: false},
	{Name: "../schema/chan/chan.query.graphql", Input: `extend type Query {
    ListChan(input: ListChanRequest!): ListChan!
    GetChan(id: Uint64!): Chan!
}`, BuiltIn: false},
	{Name: "../schema/chan/chan.type.graphql", Input: `type Chan {
    id: Uint64!
    name: String!
    description: String
    root_node: String
    nodes: [Node!]
    status: ChanStatus
    created_at: Time
    updated_at: Time
}

enum ChanStatus {
    Activated
    Deactivated
}

type ListChan {
    total: Int!
    list: [Chan]
}

input ListChanRequest {
    skip: Int!
    limit: Int!
}

input InputChan {
    name: String!
    description: String
}

input SetStatusChan {
    id: Uint64!
    status: ChanStatus!
}`, BuiltIn: false},
	{Name: "../schema/node/node.mutation.graphql", Input: `extend type Mutation {
    UpdateNode(chanId: Uint64!, input: InputNode!): Boolean!
    UpdateNodes(chanId: Uint64!, input: [InputNode!]): Boolean!
    DeleteNode(id: Uint64!): Boolean!
}`, BuiltIn: false},
	{Name: "../schema/node/node.query.graphql", Input: `extend type Query {
    GetNode(id: Uint64!): Node!
}`, BuiltIn: false},
	{Name: "../schema/node/node.type.graphql", Input: `type Node {
    id : Uint64!
    node_id: String!
    chain_id: Uint64!
    rule_id: String!
    option: Map
    debug: Boolean!
    end: Boolean!
    created_at: Time
    updated_at: Time
}

input InputNode {
    node_id: String!
    rule_id: String!
    option: Map
    debug: Boolean
    end: Boolean
}`, BuiltIn: false},
	{Name: "../schema/session/session.mutation.graphql", Input: `extend type Mutation {
	AddSession(input: SessionRequest!): Boolean!
	StopSession(id: Uint64!): Boolean!
}`, BuiltIn: false},
	{Name: "../schema/session/session.query.graphql", Input: `extend type Query {
	ListSession(input: SessionListRequest!): ListSessionInfo!
	GetSession(id: Uint64!): SessionInfo!
}`, BuiltIn: false},
	{Name: "../schema/session/session.subscription.graphql", Input: `type Subscription {
    Debug(input: DebugFilter): [SessionOutput!]
}

`, BuiltIn: false},
	{Name: "../schema/session/session.type.graphql", Input: `type SessionInfo {
    id: Uint64!
    chan_id: Uint64!
    infinity: Boolean!
    chan: Chan
}


type ListSessionInfo {
    total: Int!
    sessions: [SessionInfo]
}
input SessionListRequest {
    infinity: Boolean!
    skip: Int!
    limit: Int!
}

type SessionOutput {
    chan_id: Uint64!
    session_id: Uint64!
    form_engine: String!
    data: Map!
    type: OutputType!
    error: ErrorEngine
}

type ErrorEngine {
    message:     String
    error_detail: String
    code   : Int
}

enum OutputType {
    Success
    Error
}

input DebugFilter {
    chan_id: String
}

input SessionRequest {
    chan_id: String!
    is_test: Boolean!
    data: Map
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)
