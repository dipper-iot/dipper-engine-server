// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/dipper-iot/dipper-engine-server/ent"
	"github.com/dipper-iot/dipper-engine-server/graph/model"
	"github.com/dipper-iot/dipper-engine-server/models"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

type ChanResolver interface {
	Nodes(ctx context.Context, obj *ent.RuleChan) ([]*ent.RuleNode, error)
	Status(ctx context.Context, obj *ent.RuleChan) (*model.ChanStatus, error)
}

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Chan_id(ctx context.Context, field graphql.CollectedField, obj *ent.RuleChan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Chan_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNUint642uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Chan_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Chan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Uint64 does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Chan_name(ctx context.Context, field graphql.CollectedField, obj *ent.RuleChan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Chan_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Chan_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Chan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Chan_description(ctx context.Context, field graphql.CollectedField, obj *ent.RuleChan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Chan_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Chan_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Chan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Chan_root_node(ctx context.Context, field graphql.CollectedField, obj *ent.RuleChan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Chan_root_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RootNode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Chan_root_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Chan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Chan_nodes(ctx context.Context, field graphql.CollectedField, obj *ent.RuleChan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Chan_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Chan().Nodes(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.RuleNode)
	fc.Result = res
	return ec.marshalONode2ᚕᚖgithubᚗcomᚋdipperᚑiotᚋdipperᚑengineᚑserverᚋentᚐRuleNodeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Chan_nodes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Chan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Node_id(ctx, field)
			case "node_id":
				return ec.fieldContext_Node_node_id(ctx, field)
			case "chain_id":
				return ec.fieldContext_Node_chain_id(ctx, field)
			case "rule_id":
				return ec.fieldContext_Node_rule_id(ctx, field)
			case "option":
				return ec.fieldContext_Node_option(ctx, field)
			case "debug":
				return ec.fieldContext_Node_debug(ctx, field)
			case "end":
				return ec.fieldContext_Node_end(ctx, field)
			case "created_at":
				return ec.fieldContext_Node_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Node_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Node", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Chan_status(ctx context.Context, field graphql.CollectedField, obj *ent.RuleChan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Chan_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Chan().Status(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ChanStatus)
	fc.Result = res
	return ec.marshalOChanStatus2ᚖgithubᚗcomᚋdipperᚑiotᚋdipperᚑengineᚑserverᚋgraphᚋmodelᚐChanStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Chan_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Chan",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ChanStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Chan_created_at(ctx context.Context, field graphql.CollectedField, obj *ent.RuleChan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Chan_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Chan_created_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Chan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Chan_updated_at(ctx context.Context, field graphql.CollectedField, obj *ent.RuleChan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Chan_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Chan_updated_at(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Chan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListChan_total(ctx context.Context, field graphql.CollectedField, obj *model.ListChan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListChan_total(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Total, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListChan_total(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListChan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ListChan_list(ctx context.Context, field graphql.CollectedField, obj *model.ListChan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ListChan_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.RuleChan)
	fc.Result = res
	return ec.marshalOChan2ᚕᚖgithubᚗcomᚋdipperᚑiotᚋdipperᚑengineᚑserverᚋentᚐRuleChan(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ListChan_list(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ListChan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Chan_id(ctx, field)
			case "name":
				return ec.fieldContext_Chan_name(ctx, field)
			case "description":
				return ec.fieldContext_Chan_description(ctx, field)
			case "root_node":
				return ec.fieldContext_Chan_root_node(ctx, field)
			case "nodes":
				return ec.fieldContext_Chan_nodes(ctx, field)
			case "status":
				return ec.fieldContext_Chan_status(ctx, field)
			case "created_at":
				return ec.fieldContext_Chan_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_Chan_updated_at(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Chan", field.Name)
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputInputChan(ctx context.Context, obj interface{}) (model.InputChan, error) {
	var it model.InputChan
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "description"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputListChanRequest(ctx context.Context, obj interface{}) (models.ListChanRequest, error) {
	var it models.ListChanRequest
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"skip", "limit"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "skip":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skip"))
			it.Skip, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "limit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
			it.Limit, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSetStatusChan(ctx context.Context, obj interface{}) (model.SetStatusChan, error) {
	var it model.SetStatusChan
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNUint642uint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalNChanStatus2githubᚗcomᚋdipperᚑiotᚋdipperᚑengineᚑserverᚋgraphᚋmodelᚐChanStatus(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var chanImplementors = []string{"Chan"}

func (ec *executionContext) _Chan(ctx context.Context, sel ast.SelectionSet, obj *ent.RuleChan) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chanImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Chan")
		case "id":

			out.Values[i] = ec._Chan_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":

			out.Values[i] = ec._Chan_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":

			out.Values[i] = ec._Chan_description(ctx, field, obj)

		case "root_node":

			out.Values[i] = ec._Chan_root_node(ctx, field, obj)

		case "nodes":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Chan_nodes(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "status":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Chan_status(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return innerFunc(ctx)

			})
		case "created_at":

			out.Values[i] = ec._Chan_created_at(ctx, field, obj)

		case "updated_at":

			out.Values[i] = ec._Chan_updated_at(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var listChanImplementors = []string{"ListChan"}

func (ec *executionContext) _ListChan(ctx context.Context, sel ast.SelectionSet, obj *model.ListChan) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listChanImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ListChan")
		case "total":

			out.Values[i] = ec._ListChan_total(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "list":

			out.Values[i] = ec._ListChan_list(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNChan2githubᚗcomᚋdipperᚑiotᚋdipperᚑengineᚑserverᚋentᚐRuleChan(ctx context.Context, sel ast.SelectionSet, v ent.RuleChan) graphql.Marshaler {
	return ec._Chan(ctx, sel, &v)
}

func (ec *executionContext) marshalNChan2ᚖgithubᚗcomᚋdipperᚑiotᚋdipperᚑengineᚑserverᚋentᚐRuleChan(ctx context.Context, sel ast.SelectionSet, v *ent.RuleChan) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Chan(ctx, sel, v)
}

func (ec *executionContext) unmarshalNChanStatus2githubᚗcomᚋdipperᚑiotᚋdipperᚑengineᚑserverᚋgraphᚋmodelᚐChanStatus(ctx context.Context, v interface{}) (model.ChanStatus, error) {
	var res model.ChanStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNChanStatus2githubᚗcomᚋdipperᚑiotᚋdipperᚑengineᚑserverᚋgraphᚋmodelᚐChanStatus(ctx context.Context, sel ast.SelectionSet, v model.ChanStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNInputChan2githubᚗcomᚋdipperᚑiotᚋdipperᚑengineᚑserverᚋgraphᚋmodelᚐInputChan(ctx context.Context, v interface{}) (model.InputChan, error) {
	res, err := ec.unmarshalInputInputChan(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNListChan2githubᚗcomᚋdipperᚑiotᚋdipperᚑengineᚑserverᚋgraphᚋmodelᚐListChan(ctx context.Context, sel ast.SelectionSet, v model.ListChan) graphql.Marshaler {
	return ec._ListChan(ctx, sel, &v)
}

func (ec *executionContext) marshalNListChan2ᚖgithubᚗcomᚋdipperᚑiotᚋdipperᚑengineᚑserverᚋgraphᚋmodelᚐListChan(ctx context.Context, sel ast.SelectionSet, v *model.ListChan) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ListChan(ctx, sel, v)
}

func (ec *executionContext) unmarshalNListChanRequest2githubᚗcomᚋdipperᚑiotᚋdipperᚑengineᚑserverᚋmodelsᚐListChanRequest(ctx context.Context, v interface{}) (models.ListChanRequest, error) {
	res, err := ec.unmarshalInputListChanRequest(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSetStatusChan2githubᚗcomᚋdipperᚑiotᚋdipperᚑengineᚑserverᚋgraphᚋmodelᚐSetStatusChan(ctx context.Context, v interface{}) (model.SetStatusChan, error) {
	res, err := ec.unmarshalInputSetStatusChan(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOChan2ᚕᚖgithubᚗcomᚋdipperᚑiotᚋdipperᚑengineᚑserverᚋentᚐRuleChan(ctx context.Context, sel ast.SelectionSet, v []*ent.RuleChan) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOChan2ᚖgithubᚗcomᚋdipperᚑiotᚋdipperᚑengineᚑserverᚋentᚐRuleChan(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOChan2ᚖgithubᚗcomᚋdipperᚑiotᚋdipperᚑengineᚑserverᚋentᚐRuleChan(ctx context.Context, sel ast.SelectionSet, v *ent.RuleChan) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Chan(ctx, sel, v)
}

func (ec *executionContext) unmarshalOChanStatus2ᚖgithubᚗcomᚋdipperᚑiotᚋdipperᚑengineᚑserverᚋgraphᚋmodelᚐChanStatus(ctx context.Context, v interface{}) (*model.ChanStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ChanStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOChanStatus2ᚖgithubᚗcomᚋdipperᚑiotᚋdipperᚑengineᚑserverᚋgraphᚋmodelᚐChanStatus(ctx context.Context, sel ast.SelectionSet, v *model.ChanStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

// endregion ***************************** type.gotpl *****************************
